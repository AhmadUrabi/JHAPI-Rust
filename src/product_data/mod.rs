use std::time::Instant;

use oracle::pool::Pool;
#[allow(non_snake_case)]
use oracle::Result;

use rocket::log::private::info;
use rocket::serde::json::Json;

use crate::product_data::structs::FetchParams;
use crate::product_data::structs::Product;

use crate::ApiKey;

use crate::utils::permissions::is_cost_perm;

pub mod structs;

pub async fn get_product(
    params: Json<FetchParams>,
    pool: &Pool,
    key: &ApiKey<'_>,
) -> Result<Vec<Product>> {
    if params.p_ref.is_none() && params.p_barcode.is_none() && params.p_id.is_none() {
        return Ok(vec![]);
    }

    let mut mypRef = "%";
    let mut mypBarcode = "%";
    let mut mypId = "%";

    if let Some(pRef) = &params.p_ref {
        mypRef = pRef;
    }

    if let Some(pBarcode) = &params.p_barcode {
        mypBarcode = pBarcode;
    }

    if let Some(pId) = &params.p_id {
        mypId = pId;
    }

    let conn = pool.get()?;

    // Using column names made it hang on request -- On linux machine
    /* ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35 */

    // Store start time
    let start = Instant::now();

    let mut stmt;
    let rows;
    if mypRef == "%" && mypBarcode != "%" {
        println!("a");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE BARCODE_LISTED LIKE '%' || :barcode || '%' AND ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypBarcode, &mypId])?;
    } else if mypRef != "%" && mypBarcode == "%" {
        println!("b");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE FOREIGN_ITEM_CODE LIKE :ref AND ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypRef, &mypId])?;
    } else if mypRef == "%" && mypBarcode == "%" {
        println!("c");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypId])?;
    } else {
        println!("d");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE FOREIGN_ITEM_CODE LIKE :ref AND BARCODE_LISTED LIKE '%' || :barcode || '%' AND ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypRef, &mypBarcode, &mypId])?;
    }

    // let mut stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE FOREIGN_ITEM_CODE LIKE :ref AND ITEM_MAIN_BARCODE LIKE :barcode AND ITEM_ID LIKE :id").build()?;
    //let mut stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE FOREIGN_ITEM_CODE LIKE :ref AND (ITEM_MAIN_BARCODE = :barcode OR BARCODE_LISTED LIKE '%' || :barcode || '%') AND ITEM_ID LIKE :id").build()?;

    println!("Query Time: {:?}", start.elapsed());

    let mut products: Vec<Product> = vec![];

    for row_result in rows {
        let row = row_result?;
        products.push(Product {
            ITEM_ID: row.get("ITEM_ID")?,
            IS_ACTIVE: row.get("IS_ACTIVE")?,
            CAN_BE_SOLD: row.get("CAN_BE_SOLD")?,
            ITEM_DESC: row.get("ITEM_DESC")?,
            ITEM_DESC_S: row.get("ITEM_DESC_S")?,
            FOREIGN_ITEM_CODE: row.get("FOREIGN_ITEM_CODE")?,
            ITEM_CAT: row.get("ITEM_CAT")?,
            ITEM_SUB_CAT: row.get("ITEM_SUB_CAT")?,
            SALE_UNIT: row.get("SALE_UNIT")?,
            UNIT_DESC: row.get("UNIT_DESC")?,
            PACKING: row.get("PACKING")?,
            CARD_OPEN_DATE: row.get("CARD_OPEN_DATE")?,
            HS_CODE: row.get("HS_CODE")?,
            COUNTRY: row.get("COUNTRY")?,
            COUNTRY_DESC: row.get("COUNTRY_DESC")?,
            SUPPLIER_ID: row.get("SUPPLIER_ID")?,
            SUPPLIER_DESC: row.get("SUPPLIER_DESC")?,
            ITEM_MAIN_BARCODE: row.get("ITEM_MAIN_BARCODE")?,
            NATURE_ID: row.get("NATURE_ID")?,
            NATURE_DESC: row.get("NATURE_DESC")?,
            TRADE_ID: row.get("TRADE_ID")?,
            TRADE_DESC: row.get("TRADE_DESC")?,
            QTY_STORE_01: row.get("QTY_STORE_01")?,
            QTY_STORE_02: row.get("QTY_STORE_02")?,
            QTY_STORE_05: row.get("QTY_STORE_05")?,
            QTY_STORE_06: row.get("QTY_STORE_06")?,
            QTY_STORE_07: row.get("QTY_STORE_07")?,
            QTY_STORE_08: row.get("QTY_STORE_08")?,
            QTY_STORE_09: row.get("QTY_STORE_09")?,
            QTY_STORE_10: row.get("QTY_STORE_10")?,
            QTY_STORE_11: row.get("QTY_STORE_11")?,
            QTY_STORE_12: row.get("QTY_STORE_12")?,
            QTY_STORE_19: row.get("QTY_STORE_19")?,
            QTY_STORE_21: row.get("QTY_STORE_21")?,
            QTY_STORE_23: row.get("QTY_STORE_23")?,
            QTY_STORE_31: row.get("QTY_STORE_31")?,
            QTY_STORE_32: row.get("QTY_STORE_32")?,
            QTY_STORE_33: row.get("QTY_STORE_33")?,
            QTY_STORE_34: row.get("QTY_STORE_34")?,
            QTY_STORE_35: row.get("QTY_STORE_35")?,
            SALE_PRICE_NOTAX_STORE_01: row.get("SALE_PRICE_NOTAX_STORE_01")?,
            SALE_PRICE_NOTAX_STORE_02: row.get("SALE_PRICE_NOTAX_STORE_02")?,
            SALE_PRICE_NOTAX_STORE_05: row.get("SALE_PRICE_NOTAX_STORE_05")?,
            SALE_PRICE_NOTAX_STORE_06: row.get("SALE_PRICE_NOTAX_STORE_06")?,
            SALE_PRICE_NOTAX_STORE_08: row.get("SALE_PRICE_NOTAX_STORE_08")?,
            SALE_PRICE_NOTAX_STORE_09: row.get("SALE_PRICE_NOTAX_STORE_09")?,
            SALE_PRICE_NOTAX_STORE_07: row.get("SALE_PRICE_NOTAX_STORE_07")?,
            SALE_PRICE_NOTAX_STORE_31: row.get("SALE_PRICE_NOTAX_STORE_31")?,
            SALE_PRICE_NOTAX_STORE_32: row.get("SALE_PRICE_NOTAX_STORE_32")?,
            SALE_PRICE_NOTAX_STORE_33: row.get("SALE_PRICE_NOTAX_STORE_33")?,
            SALE_PRICE_NOTAX_STORE_34: row.get("SALE_PRICE_NOTAX_STORE_34")?,
            SALE_PRICE_NOTAX_STORE_35: row.get("SALE_PRICE_NOTAX_STORE_35")?,
            FIRST_DISC_PER_STORE_01: row.get("FIRST_DISC_PER_STORE_01")?,
            FIRST_DISC_PER_STORE_02: row.get("FIRST_DISC_PER_STORE_02")?,
            FIRST_DISC_PER_STORE_05: row.get("FIRST_DISC_PER_STORE_05")?,
            FIRST_DISC_PER_STORE_06: row.get("FIRST_DISC_PER_STORE_06")?,
            FIRST_DISC_PER_STORE_07: row.get("FIRST_DISC_PER_STORE_07")?,
            FIRST_DISC_PER_STORE_08: row.get("FIRST_DISC_PER_STORE_08")?,
            FIRST_DISC_PER_STORE_09: row.get("FIRST_DISC_PER_STORE_09")?,
            FIRST_DISC_PER_STORE_31: row.get("FIRST_DISC_PER_STORE_31")?,
            FIRST_DISC_PER_STORE_32: row.get("FIRST_DISC_PER_STORE_32")?,
            FIRST_DISC_PER_STORE_33: row.get("FIRST_DISC_PER_STORE_33")?,
            FIRST_DISC_PER_STORE_34: row.get("FIRST_DISC_PER_STORE_34")?,
            FIRST_DISC_PER_STORE_35: row.get("FIRST_DISC_PER_STORE_35")?,
            SECOND_DISC_PER_STORE_01: row.get("SECOND_DISC_PER_STORE_01")?,
            SECOND_DISC_PER_STORE_02: row.get("SECOND_DISC_PER_STORE_02")?,
            SECOND_DISC_PER_STORE_05: row.get("SECOND_DISC_PER_STORE_05")?,
            SECOND_DISC_PER_STORE_06: row.get("SECOND_DISC_PER_STORE_06")?,
            SECOND_DISC_PER_STORE_07: row.get("SECOND_DISC_PER_STORE_07")?,
            SECOND_DISC_PER_STORE_08: row.get("SECOND_DISC_PER_STORE_08")?,
            SECOND_DISC_PER_STORE_09: row.get("SECOND_DISC_PER_STORE_09")?,
            SECOND_DISC_PER_STORE_31: row.get("SECOND_DISC_PER_STORE_31")?,
            SECOND_DISC_PER_STORE_32: row.get("SECOND_DISC_PER_STORE_32")?,
            SECOND_DISC_PER_STORE_33: row.get("SECOND_DISC_PER_STORE_33")?,
            SECOND_DISC_PER_STORE_34: row.get("SECOND_DISC_PER_STORE_34")?,
            SECOND_DISC_PER_STORE_35: row.get("SECOND_DISC_PER_STORE_35")?,
            T_AVE_COST: if is_cost_perm(key, pool) {
                row.get("T_AVE_COST")?
            } else {
                None
            },
        });
    }

    info!("Products Count: {:?}", products.len());

    Ok(products)
}


pub async fn get_product_pi(
    params: Json<FetchParams>,
    pool: &Pool,
    _key: &ApiKey<'_>,
) -> Result<Vec<Product>> {
    if params.p_ref.is_none() && params.p_barcode.is_none() && params.p_id.is_none() {
        return Ok(vec![]);
    }

    let mut mypRef = "%";
    let mut mypBarcode = "%";
    let mut mypId = "%";

    if let Some(pRef) = &params.p_ref {
        mypRef = pRef;
    }

    if let Some(pBarcode) = &params.p_barcode {
        mypBarcode = pBarcode;
    }

    if let Some(pId) = &params.p_id {
        mypId = pId;
    }

    let conn = pool.get()?;

    // Using column names made it hang on request -- On linux machine
    /* ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35 */

    // Store start time
    let start = Instant::now();

    let mut stmt;
    let rows;
    if mypRef == "%" && mypBarcode != "%" {
        println!("a");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE_CARD, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35 FROM ODBC_JHC.JHC_INVDATA_PI WHERE BARCODE_LISTED LIKE '%' || :barcode || '%' AND ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypBarcode, &mypId])?;
    } else if mypRef != "%" && mypBarcode == "%" {
        println!("b");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE_CARD, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35 FROM ODBC_JHC.JHC_INVDATA_PI WHERE FOREIGN_ITEM_CODE LIKE :ref AND ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypRef, &mypId])?;
    } else if mypRef == "%" && mypBarcode == "%" {
        println!("c");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE_CARD, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35 FROM ODBC_JHC.JHC_INVDATA_PI WHERE ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypId])?;
    } else {
        println!("d");
        stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE_CARD, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35 FROM ODBC_JHC.JHC_INVDATA_PI WHERE FOREIGN_ITEM_CODE LIKE :ref AND BARCODE_LISTED LIKE '%' || :barcode || '%' AND ITEM_ID LIKE :id").build()?;
        rows = stmt.query(&[&mypRef, &mypBarcode, &mypId])?;
    }

    // let mut stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE FOREIGN_ITEM_CODE LIKE :ref AND ITEM_MAIN_BARCODE LIKE :barcode AND ITEM_ID LIKE :id").build()?;
    //let mut stmt = conn.statement("SELECT ITEM_ID, IS_ACTIVE, CAN_BE_SOLD, ITEM_DESC, ITEM_DESC_S, FOREIGN_ITEM_CODE, ITEM_CAT, ITEM_SUB_CAT, SALE_UNIT, UNIT_DESC, PACKING, CARD_OPEN_DATE, HS_CODE, COUNTRY, COUNTRY_DESC, SUPPLIER_ID, SUPPLIER_DESC, ITEM_MAIN_BARCODE, NATURE_ID, NATURE_DESC, TRADE_ID, TRADE_DESC, QTY_STORE_01, QTY_STORE_02, QTY_STORE_05, QTY_STORE_06, QTY_STORE_07, QTY_STORE_08, QTY_STORE_09, QTY_STORE_10, QTY_STORE_11, QTY_STORE_12, QTY_STORE_19, QTY_STORE_21, QTY_STORE_23, QTY_STORE_31, QTY_STORE_32, QTY_STORE_33, QTY_STORE_34, QTY_STORE_35, SALE_PRICE_NOTAX_STORE_01, SALE_PRICE_NOTAX_STORE_02, SALE_PRICE_NOTAX_STORE_05, SALE_PRICE_NOTAX_STORE_06, SALE_PRICE_NOTAX_STORE_08, SALE_PRICE_NOTAX_STORE_09, SALE_PRICE_NOTAX_STORE_07, SALE_PRICE_NOTAX_STORE_31, SALE_PRICE_NOTAX_STORE_32, SALE_PRICE_NOTAX_STORE_33, SALE_PRICE_NOTAX_STORE_34, SALE_PRICE_NOTAX_STORE_35, FIRST_DISC_PER_STORE_01, FIRST_DISC_PER_STORE_02, FIRST_DISC_PER_STORE_05, FIRST_DISC_PER_STORE_06, FIRST_DISC_PER_STORE_07, FIRST_DISC_PER_STORE_08, FIRST_DISC_PER_STORE_09, FIRST_DISC_PER_STORE_31, FIRST_DISC_PER_STORE_32, FIRST_DISC_PER_STORE_33, FIRST_DISC_PER_STORE_34, FIRST_DISC_PER_STORE_35, SECOND_DISC_PER_STORE_01, SECOND_DISC_PER_STORE_02, SECOND_DISC_PER_STORE_05, SECOND_DISC_PER_STORE_06, SECOND_DISC_PER_STORE_07, SECOND_DISC_PER_STORE_08, SECOND_DISC_PER_STORE_09, SECOND_DISC_PER_STORE_31, SECOND_DISC_PER_STORE_32, SECOND_DISC_PER_STORE_33, SECOND_DISC_PER_STORE_34, SECOND_DISC_PER_STORE_35, T_AVE_COST FROM ODBC_JHC.JHC_INVDATA WHERE FOREIGN_ITEM_CODE LIKE :ref AND (ITEM_MAIN_BARCODE = :barcode OR BARCODE_LISTED LIKE '%' || :barcode || '%') AND ITEM_ID LIKE :id").build()?;

    println!("Query Time: {:?}", start.elapsed());

    let mut products: Vec<Product> = vec![];

    for row_result in rows {
        let row = row_result?;
        products.push(Product {
            ITEM_ID: row.get("ITEM_ID")?,
            IS_ACTIVE: row.get("IS_ACTIVE_CARD")?,
            CAN_BE_SOLD: row.get("CAN_BE_SOLD")?,
            ITEM_DESC: row.get("ITEM_DESC")?,
            ITEM_DESC_S: row.get("ITEM_DESC_S")?,
            FOREIGN_ITEM_CODE: row.get("FOREIGN_ITEM_CODE")?,
            ITEM_CAT: row.get("ITEM_CAT")?,
            ITEM_SUB_CAT: row.get("ITEM_SUB_CAT")?,
            SALE_UNIT: row.get("SALE_UNIT")?,
            UNIT_DESC: row.get("UNIT_DESC")?,
            PACKING: row.get("PACKING")?,
            CARD_OPEN_DATE: row.get("CARD_OPEN_DATE")?,
            HS_CODE: row.get("HS_CODE")?,
            COUNTRY: row.get("COUNTRY")?,
            COUNTRY_DESC: row.get("COUNTRY_DESC")?,
            SUPPLIER_ID: row.get("SUPPLIER_ID")?,
            SUPPLIER_DESC: row.get("SUPPLIER_DESC")?,
            ITEM_MAIN_BARCODE: row.get("ITEM_MAIN_BARCODE")?,
            NATURE_ID: row.get("NATURE_ID")?,
            NATURE_DESC: row.get("NATURE_DESC")?,
            TRADE_ID: row.get("TRADE_ID")?,
            TRADE_DESC: row.get("TRADE_DESC")?,
            QTY_STORE_01: row.get("QTY_STORE_01")?,
            QTY_STORE_02: row.get("QTY_STORE_02")?,
            QTY_STORE_05: row.get("QTY_STORE_05")?,
            QTY_STORE_06: row.get("QTY_STORE_06")?,
            QTY_STORE_07: row.get("QTY_STORE_07")?,
            QTY_STORE_08: row.get("QTY_STORE_08")?,
            QTY_STORE_09: row.get("QTY_STORE_09")?,
            QTY_STORE_10: row.get("QTY_STORE_10")?,
            QTY_STORE_11: row.get("QTY_STORE_11")?,
            QTY_STORE_12: row.get("QTY_STORE_12")?,
            QTY_STORE_19: row.get("QTY_STORE_19")?,
            QTY_STORE_21: row.get("QTY_STORE_21")?,
            QTY_STORE_23: row.get("QTY_STORE_23")?,
            QTY_STORE_31: row.get("QTY_STORE_31")?,
            QTY_STORE_32: row.get("QTY_STORE_32")?,
            QTY_STORE_33: row.get("QTY_STORE_33")?,
            QTY_STORE_34: row.get("QTY_STORE_34")?,
            QTY_STORE_35: row.get("QTY_STORE_35")?,
            SALE_PRICE_NOTAX_STORE_01: row.get("SALE_PRICE_NOTAX_STORE_01")?,
            SALE_PRICE_NOTAX_STORE_02: row.get("SALE_PRICE_NOTAX_STORE_02")?,
            SALE_PRICE_NOTAX_STORE_05: row.get("SALE_PRICE_NOTAX_STORE_05")?,
            SALE_PRICE_NOTAX_STORE_06: row.get("SALE_PRICE_NOTAX_STORE_06")?,
            SALE_PRICE_NOTAX_STORE_08: row.get("SALE_PRICE_NOTAX_STORE_08")?,
            SALE_PRICE_NOTAX_STORE_09: row.get("SALE_PRICE_NOTAX_STORE_09")?,
            SALE_PRICE_NOTAX_STORE_07: row.get("SALE_PRICE_NOTAX_STORE_07")?,
            SALE_PRICE_NOTAX_STORE_31: row.get("SALE_PRICE_NOTAX_STORE_31")?,
            SALE_PRICE_NOTAX_STORE_32: row.get("SALE_PRICE_NOTAX_STORE_32")?,
            SALE_PRICE_NOTAX_STORE_33: row.get("SALE_PRICE_NOTAX_STORE_33")?,
            SALE_PRICE_NOTAX_STORE_34: row.get("SALE_PRICE_NOTAX_STORE_34")?,
            SALE_PRICE_NOTAX_STORE_35: row.get("SALE_PRICE_NOTAX_STORE_35")?,
            FIRST_DISC_PER_STORE_01: row.get("FIRST_DISC_PER_STORE_01")?,
            FIRST_DISC_PER_STORE_02: row.get("FIRST_DISC_PER_STORE_02")?,
            FIRST_DISC_PER_STORE_05: row.get("FIRST_DISC_PER_STORE_05")?,
            FIRST_DISC_PER_STORE_06: row.get("FIRST_DISC_PER_STORE_06")?,
            FIRST_DISC_PER_STORE_07: row.get("FIRST_DISC_PER_STORE_07")?,
            FIRST_DISC_PER_STORE_08: row.get("FIRST_DISC_PER_STORE_08")?,
            FIRST_DISC_PER_STORE_09: row.get("FIRST_DISC_PER_STORE_09")?,
            FIRST_DISC_PER_STORE_31: row.get("FIRST_DISC_PER_STORE_31")?,
            FIRST_DISC_PER_STORE_32: row.get("FIRST_DISC_PER_STORE_32")?,
            FIRST_DISC_PER_STORE_33: row.get("FIRST_DISC_PER_STORE_33")?,
            FIRST_DISC_PER_STORE_34: row.get("FIRST_DISC_PER_STORE_34")?,
            FIRST_DISC_PER_STORE_35: row.get("FIRST_DISC_PER_STORE_35")?,
            SECOND_DISC_PER_STORE_01: row.get("SECOND_DISC_PER_STORE_01")?,
            SECOND_DISC_PER_STORE_02: row.get("SECOND_DISC_PER_STORE_02")?,
            SECOND_DISC_PER_STORE_05: row.get("SECOND_DISC_PER_STORE_05")?,
            SECOND_DISC_PER_STORE_06: row.get("SECOND_DISC_PER_STORE_06")?,
            SECOND_DISC_PER_STORE_07: row.get("SECOND_DISC_PER_STORE_07")?,
            SECOND_DISC_PER_STORE_08: row.get("SECOND_DISC_PER_STORE_08")?,
            SECOND_DISC_PER_STORE_09: row.get("SECOND_DISC_PER_STORE_09")?,
            SECOND_DISC_PER_STORE_31: row.get("SECOND_DISC_PER_STORE_31")?,
            SECOND_DISC_PER_STORE_32: row.get("SECOND_DISC_PER_STORE_32")?,
            SECOND_DISC_PER_STORE_33: row.get("SECOND_DISC_PER_STORE_33")?,
            SECOND_DISC_PER_STORE_34: row.get("SECOND_DISC_PER_STORE_34")?,
            SECOND_DISC_PER_STORE_35: row.get("SECOND_DISC_PER_STORE_35")?,
            T_AVE_COST: None
        });
    }

    info!("Products Count: {:?}", products.len());

    Ok(products)
}